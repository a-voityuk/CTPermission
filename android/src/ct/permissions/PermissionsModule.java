/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ct.permissions;

import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiBaseActivity;

import android.app.Activity;
import android.content.pm.PackageManager;
import android.os.Build;
//import android.support.v4.app.ActivityCompat;
//import android.support.v4.content.ContextCompat;

@Kroll.module(name="Permissions", id="ct.permissions")
public class PermissionsModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "PermissionsModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public PermissionsModule()
	{
		super();
	}
	
	/**
	 * check, if given permission is currently granted
	 * 
	 * @param requestedPermission - permission as defined in Manifest
	 * @return
	 */
	@Kroll.method
	public boolean hasPermission(@Kroll.argument() String requestedPermission) {
		Log.d(LCAT, "check for granted permission: " + requestedPermission);

		// TODO really depends on Build or Platform???
		if (Build.VERSION.SDK_INT < 23) {
			return true;
		}

	    Activity currentActivity = TiApplication.getInstance().getCurrentActivity();
	    if (currentActivity.checkSelfPermission(requestedPermission) == PackageManager.PERMISSION_GRANTED) {
	        return true;
	    } 
	    return false;
	}
	
	/**
	 * Request a permission and optionally register a callback for the current activity
	 * 
	 * @param requestedPermission permission as defined in Manifest
	 * @param permissionCallback function called with result of permission prompt
	 */
	@Kroll.method
	public void requestPermission(String requestedPermission,
			@Kroll.argument(optional = true) KrollFunction permissionCallback) {

		Log.d(LCAT, "request permission: " + requestedPermission);
		
		if (hasPermission(requestedPermission)) {
			return;
		}

		if (TiBaseActivity.cameraCallbackContext == null) {
			TiBaseActivity.cameraCallbackContext = getKrollObject();
		}
		
		TiBaseActivity.cameraPermissionCallback = permissionCallback;
		String[] permissions = null;
		permissions = new String[] {requestedPermission};
		
		Activity currentActivity = TiApplication.getInstance().getCurrentActivity();		
		currentActivity.requestPermissions(permissions, TiC.PERMISSION_CODE_CAMERA);
	}
}

